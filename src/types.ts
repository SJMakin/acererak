export interface StoryNode {
  id: string;
  type: 'story';
  content: string; // The story text generated by the AI
  summary?: string; // Short summary for graph display
  position: { x: number; y: number };
  data: { label: string };
  characterUpdateDescription?: string; // Description of character sheet changes
  rollResults?: RollResult[]; // Results of dice rolls that led to this node
}

export interface DiceRoll {
  type: 'd4' | 'd6' | 'd8' | 'd10' | 'd12' | 'd20' | 'd100';
  count: number;
  modifier?: number;
  difficulty?: number; // DC for skill checks
  skill?: string; // The skill being checked
  description: string; // What this roll is for
}

export interface ChoiceNode {
  id: string;
  type: 'choice';
  text: string;   // The choice presented to the user
  target: string; // ID of the next StoryNode this choice leads to
  position: { x: number; y: number };
  data: { label: string };
  requiredRolls?: DiceRoll[]; // Array of dice rolls required for this choice
}

export type Node = StoryNode | ChoiceNode;

// Type guards
export function isStoryNode(node: Node): node is StoryNode {
  return node.type === 'story';
}

export function isChoiceNode(node: Node): node is ChoiceNode {
  return node.type === 'choice';
}

export function isValidStoryResponse(response: unknown): response is StoryGenerationResponse {
  try {
    if (!response || typeof response !== 'object') {
      console.error('Invalid response structure');
      return false;
    }
    
    const typedResponse = response as Record<string, unknown>;
    
    if (!typedResponse.story || typeof typedResponse.story !== 'object') {
      console.error('Invalid or missing story object');
      return false;
    }
    
    const story = typedResponse.story as Record<string, unknown>;
    
    if (typeof story.content !== 'string') {
      console.error('Invalid or missing story content');
      return false;
    }
    
    if (typeof story.summary !== 'string') {
      console.error('Invalid or missing story summary');
      return false;
    }
    
    if (!Array.isArray(typedResponse.choices) || typedResponse.choices.length < 2) {
      console.error('Invalid or insufficient choices');
      return false;
    }
    
    if (!typedResponse.choices.every((choice: unknown) => {
      if (!choice || typeof choice !== 'object') return false;
      const typedChoice = choice as Record<string, unknown>;
      return typeof typedChoice.text === 'string' && typeof typedChoice.nextNodeId === 'string';
    })) {
      console.error('Invalid choice structure');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error validating story response:', error);
    return false;
  }
}

export interface Edge {
  id: string;
  source: string; // ID of the source StoryNode
  target: string; // ID of the target ChoiceNode
  type: "smoothstep";
  animated?: boolean;
  style?: {
    stroke?: string;
    strokeWidth?: number;
    opacity?: number;
  };
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
}

export interface RollResult {
  roll: DiceRoll;
  results: number[];
  total: number;
  success?: boolean; // For skill checks  
  formatted: string;
}

export interface StoryGenerationResponse {
  story: {
    content: string;
    summary: string;
  };
  choices: Array<{
    text: string;
    nextNodeId: string;
    requiredRolls?: DiceRoll[];
  }>;
  characterUpdates?: Array<{
    oldText: string;
    newText: string;
    description: string;
  }>;
  rollResults?: RollResult[];
}