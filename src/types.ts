export interface StoryNode {
  id: string;
  type: 'story';
  content: string; // The story text generated by the AI
  summary?: string; // Short summary for graph display
  position: { x: number; y: number };
  data: { label: string };
}

export interface ChoiceNode {
  id: string;
  type: 'choice';
  text: string;   // The choice presented to the user
  target: string; // ID of the next StoryNode this choice leads to
  position: { x: number; y: number };
  data: { label: string };
}

export type Node = StoryNode | ChoiceNode;

// Type guards
export function isStoryNode(node: Node): node is StoryNode {
  return node.type === 'story';
}

export function isChoiceNode(node: Node): node is ChoiceNode {
  return node.type === 'choice';
}

export function isValidStoryResponse(response: any): response is StoryGenerationResponse {
  try {
    if (!response || typeof response !== 'object') {
      console.error('Invalid response structure');
      return false;
    }
    
    if (!response.story || typeof response.story !== 'object') {
      console.error('Invalid or missing story object');
      return false;
    }
    
    if (typeof response.story.content !== 'string') {
      console.error('Invalid or missing story content');
      return false;
    }
    
    if (typeof response.story.summary !== 'string') {
      console.error('Invalid or missing story summary');
      return false;
    }
    
    if (!Array.isArray(response.choices) || response.choices.length < 2) {
      console.error('Invalid or insufficient choices');
      return false;
    }
    
    if (!response.choices.every((choice: { text: string; nextNodeId: string }) => 
      typeof choice === 'object' &&
      typeof choice.text === 'string' &&
      typeof choice.nextNodeId === 'string'
    )) {
      console.error('Invalid choice structure');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error validating story response:', error);
    return false;
  }
}

export interface Edge {
  id: string;
  source: string; // ID of the source StoryNode
  target: string; // ID of the target ChoiceNode
  type: "smoothstep";
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
}

export interface StoryGenerationResponse {
  story: {
    content: string;
    summary: string;
  };
  choices: Array<{
    text: string;
    nextNodeId: string;
  }>;
}